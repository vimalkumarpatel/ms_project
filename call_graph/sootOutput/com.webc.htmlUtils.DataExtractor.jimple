public class com.webc.htmlUtils.DataExtractor extends java.lang.Object
{
    private java.lang.String htmlpage;
    private java.net.URL inpUrl;
    com.webc.htmlUtils.LinkExtractor le;
    com.webc.htmlUtils.TextExtractor te;
    private com.webc.utils.QueueManager qm;
    private com.webc.databaseUtils.DataBaseManager dbman;

    public void <init>(com.webc.databaseUtils.DataBaseManager)
    {
        com.webc.htmlUtils.DataExtractor this;
        com.webc.databaseUtils.DataBaseManager dbman;
        int res, temp$0, temp$1;
        net.vimalpatel.test.A a, temp$2;

        this := @this: com.webc.htmlUtils.DataExtractor;
        dbman := @parameter0: com.webc.databaseUtils.DataBaseManager;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<com.webc.htmlUtils.DataExtractor: com.webc.databaseUtils.DataBaseManager dbman> = dbman;
        res = 6;
        if 6 < res goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = res;
        temp$1 = temp$0 + 1;
        res = temp$1;
        goto label2;

     label1:
        nop;
        temp$2 = new net.vimalpatel.test.A;
        specialinvoke temp$2.<net.vimalpatel.test.A: void <init>()>();
        a = temp$2;
        virtualinvoke a.<net.vimalpatel.test.A: void methodA()>();
        virtualinvoke a.<net.vimalpatel.test.A: void methodA2()>();

     label2:
        nop;
        return;
    }

    public void <init>(java.lang.String, java.net.URL, com.webc.utils.QueueManager, com.webc.databaseUtils.DataBaseManager)
    {
        com.webc.htmlUtils.DataExtractor this;
        java.lang.String htmlpage;
        java.net.URL inpUrl;
        com.webc.utils.QueueManager qm;
        com.webc.databaseUtils.DataBaseManager dbman;

        this := @this: com.webc.htmlUtils.DataExtractor;
        htmlpage := @parameter0: java.lang.String;
        inpUrl := @parameter1: java.net.URL;
        qm := @parameter2: com.webc.utils.QueueManager;
        dbman := @parameter3: com.webc.databaseUtils.DataBaseManager;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<com.webc.htmlUtils.DataExtractor: java.lang.String htmlpage> = htmlpage;
        this.<com.webc.htmlUtils.DataExtractor: java.net.URL inpUrl> = inpUrl;
        this.<com.webc.htmlUtils.DataExtractor: com.webc.utils.QueueManager qm> = qm;
        this.<com.webc.htmlUtils.DataExtractor: com.webc.databaseUtils.DataBaseManager dbman> = dbman;
        return;
    }

    public void processpage()
    {
        com.webc.htmlUtils.DataExtractor this;

        this := @this: com.webc.htmlUtils.DataExtractor;
        virtualinvoke this.<com.webc.htmlUtils.DataExtractor: void extractlinks()>();
        virtualinvoke this.<com.webc.htmlUtils.DataExtractor: void extracttext()>();
        return;
    }

    public void extractlinks()
    {
        com.webc.htmlUtils.DataExtractor this;
        com.webc.htmlUtils.LinkExtractor temp$0, temp$5, temp$6;
        java.lang.String temp$1;
        java.net.URL temp$2;
        com.webc.utils.QueueManager temp$3;
        com.webc.databaseUtils.DataBaseManager temp$4;

        this := @this: com.webc.htmlUtils.DataExtractor;
        temp$0 = new com.webc.htmlUtils.LinkExtractor;
        temp$1 = virtualinvoke this.<com.webc.htmlUtils.DataExtractor: java.lang.String getHtmlpage()>();
        temp$2 = virtualinvoke this.<com.webc.htmlUtils.DataExtractor: java.net.URL getInpUrl()>();
        temp$3 = virtualinvoke this.<com.webc.htmlUtils.DataExtractor: com.webc.utils.QueueManager getQm()>();
        temp$4 = virtualinvoke this.<com.webc.htmlUtils.DataExtractor: com.webc.databaseUtils.DataBaseManager getDbman()>();
        specialinvoke temp$0.<com.webc.htmlUtils.LinkExtractor: void <init>(java.lang.String,java.net.URL,com.webc.utils.QueueManager,com.webc.databaseUtils.DataBaseManager)>(temp$1, temp$2, temp$3, temp$4);
        this.<com.webc.htmlUtils.DataExtractor: com.webc.htmlUtils.LinkExtractor le> = temp$0;
        temp$5 = this.<com.webc.htmlUtils.DataExtractor: com.webc.htmlUtils.LinkExtractor le>;
        virtualinvoke temp$5.<com.webc.htmlUtils.LinkExtractor: void findlinks()>();
        temp$6 = this.<com.webc.htmlUtils.DataExtractor: com.webc.htmlUtils.LinkExtractor le>;
        virtualinvoke temp$6.<com.webc.htmlUtils.LinkExtractor: void ValidateAllLinks()>();
        return;
    }

    public void extracttext()
    {
        com.webc.htmlUtils.DataExtractor this;
        com.webc.htmlUtils.TextExtractor temp$0, temp$5;
        java.net.URL temp$1;
        java.lang.String temp$2, temp$3;
        com.webc.databaseUtils.DataBaseManager temp$4;

        this := @this: com.webc.htmlUtils.DataExtractor;
        temp$0 = new com.webc.htmlUtils.TextExtractor;
        temp$1 = virtualinvoke this.<com.webc.htmlUtils.DataExtractor: java.net.URL getInpUrl()>();
        temp$2 = virtualinvoke temp$1.<java.net.URL: java.lang.String toString()>();
        temp$3 = virtualinvoke this.<com.webc.htmlUtils.DataExtractor: java.lang.String getHtmlpage()>();
        temp$4 = virtualinvoke this.<com.webc.htmlUtils.DataExtractor: com.webc.databaseUtils.DataBaseManager getDbman()>();
        specialinvoke temp$0.<com.webc.htmlUtils.TextExtractor: void <init>(java.lang.String,java.lang.String,com.webc.databaseUtils.DataBaseManager)>(temp$2, temp$3, temp$4);
        this.<com.webc.htmlUtils.DataExtractor: com.webc.htmlUtils.TextExtractor te> = temp$0;
        temp$5 = this.<com.webc.htmlUtils.DataExtractor: com.webc.htmlUtils.TextExtractor te>;
        virtualinvoke temp$5.<com.webc.htmlUtils.TextExtractor: void extracttext()>();
        return;
    }

    public java.lang.String getHtmlpage()
    {
        com.webc.htmlUtils.DataExtractor this;
        java.lang.String temp$0;

        this := @this: com.webc.htmlUtils.DataExtractor;
        temp$0 = this.<com.webc.htmlUtils.DataExtractor: java.lang.String htmlpage>;
        return temp$0;
    }

    public void setHtmlpage(java.lang.String)
    {
        com.webc.htmlUtils.DataExtractor this;
        java.lang.String htmlpage;

        this := @this: com.webc.htmlUtils.DataExtractor;
        htmlpage := @parameter0: java.lang.String;
        this.<com.webc.htmlUtils.DataExtractor: java.lang.String htmlpage> = htmlpage;
        return;
    }

    public java.net.URL getInpUrl()
    {
        com.webc.htmlUtils.DataExtractor this;
        java.net.URL temp$0;

        this := @this: com.webc.htmlUtils.DataExtractor;
        temp$0 = this.<com.webc.htmlUtils.DataExtractor: java.net.URL inpUrl>;
        return temp$0;
    }

    public void setInpUrl(java.net.URL)
    {
        com.webc.htmlUtils.DataExtractor this;
        java.net.URL inpUrl;

        this := @this: com.webc.htmlUtils.DataExtractor;
        inpUrl := @parameter0: java.net.URL;
        this.<com.webc.htmlUtils.DataExtractor: java.net.URL inpUrl> = inpUrl;
        return;
    }

    public com.webc.utils.QueueManager getQm()
    {
        com.webc.htmlUtils.DataExtractor this;
        com.webc.utils.QueueManager temp$0;

        this := @this: com.webc.htmlUtils.DataExtractor;
        temp$0 = this.<com.webc.htmlUtils.DataExtractor: com.webc.utils.QueueManager qm>;
        return temp$0;
    }

    public void setQm(com.webc.utils.QueueManager)
    {
        com.webc.htmlUtils.DataExtractor this;
        com.webc.utils.QueueManager qm;

        this := @this: com.webc.htmlUtils.DataExtractor;
        qm := @parameter0: com.webc.utils.QueueManager;
        this.<com.webc.htmlUtils.DataExtractor: com.webc.utils.QueueManager qm> = qm;
        return;
    }

    public com.webc.databaseUtils.DataBaseManager getDbman()
    {
        com.webc.htmlUtils.DataExtractor this;
        com.webc.databaseUtils.DataBaseManager temp$0;

        this := @this: com.webc.htmlUtils.DataExtractor;
        temp$0 = this.<com.webc.htmlUtils.DataExtractor: com.webc.databaseUtils.DataBaseManager dbman>;
        return temp$0;
    }

    public void setDbman(com.webc.databaseUtils.DataBaseManager)
    {
        com.webc.htmlUtils.DataExtractor this;
        com.webc.databaseUtils.DataBaseManager dbman;

        this := @this: com.webc.htmlUtils.DataExtractor;
        dbman := @parameter0: com.webc.databaseUtils.DataBaseManager;
        this.<com.webc.htmlUtils.DataExtractor: com.webc.databaseUtils.DataBaseManager dbman> = dbman;
        return;
    }
}
