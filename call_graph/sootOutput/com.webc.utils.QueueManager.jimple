public class com.webc.utils.QueueManager extends java.lang.Object
{
    private java.util.Queue queue;
    private com.webc.databaseUtils.DataBaseManager dbman;
    public static java.lang.Class class$com$webc$utils$QueueManager;

    public java.net.URL readnext()
    {
        com.webc.utils.QueueManager this;
        java.util.Queue temp$0;
        java.lang.Object temp$1;
        java.net.URL temp$2;

        this := @this: com.webc.utils.QueueManager;
        temp$0 = virtualinvoke this.<com.webc.utils.QueueManager: java.util.Queue getQueue()>();
        temp$1 = interfaceinvoke temp$0.<java.util.Queue: java.lang.Object remove()>();
        temp$2 = (java.net.URL) temp$1;
        return temp$2;
    }

    public java.util.Queue getQueue()
    {
        com.webc.utils.QueueManager this;
        java.util.Queue temp$0;

        this := @this: com.webc.utils.QueueManager;
        temp$0 = this.<com.webc.utils.QueueManager: java.util.Queue queue>;
        return temp$0;
    }

    public void setQueue(java.util.Queue)
    {
        com.webc.utils.QueueManager this;
        java.util.Queue queue;

        this := @this: com.webc.utils.QueueManager;
        queue := @parameter0: java.util.Queue;
        this.<com.webc.utils.QueueManager: java.util.Queue queue> = queue;
        return;
    }

    public boolean hasnext()
    {
        com.webc.utils.QueueManager this;
        java.util.Queue temp$0;
        boolean temp$1, temp$2, temp$3;

        this := @this: com.webc.utils.QueueManager;
        temp$0 = this.<com.webc.utils.QueueManager: java.util.Queue queue>;
        temp$1 = interfaceinvoke temp$0.<java.util.Queue: boolean isEmpty()>();
        if temp$1 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$2 = 0;
        return temp$2;

     label1:
        nop;
        temp$3 = 1;
        return temp$3;
    }

    public void <init>(com.webc.databaseUtils.DataBaseManager)
    {
        com.webc.utils.QueueManager this;
        com.webc.databaseUtils.DataBaseManager dbm;
        java.util.LinkedList temp$0;

        this := @this: com.webc.utils.QueueManager;
        dbm := @parameter0: com.webc.databaseUtils.DataBaseManager;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = new java.util.LinkedList;
        specialinvoke temp$0.<java.util.LinkedList: void <init>()>();
        this.<com.webc.utils.QueueManager: java.util.Queue queue> = temp$0;
        this.<com.webc.utils.QueueManager: com.webc.databaseUtils.DataBaseManager dbman> = dbm;
        return;
    }

    public void AddUrl(java.lang.String)
    {
        com.webc.utils.QueueManager this;
        java.lang.String StrUrl, temp$5, temp$10, temp$13, temp$16, temp$17, temp$22, temp$27;
        java.net.URL tempURL, temp$0, temp$18;
        java.util.Queue temp$1, temp$6;
        boolean temp$2, temp$7;
        java.io.PrintStream temp$3, temp$8, temp$14, temp$25;
        java.lang.StringBuffer temp$4, temp$9, temp$12, temp$15, temp$26;
        com.webc.databaseUtils.DataBaseManager temp$11;
        java.net.MalformedURLException ex;
        java.lang.Class temp$19, temp$20, temp$21;
        java.util.logging.Logger temp$23;
        java.util.logging.Level temp$24;

        this := @this: com.webc.utils.QueueManager;
        StrUrl := @parameter0: java.lang.String;
        tempURL = null;

     label0:
        nop;
        temp$0 = new java.net.URL;
        specialinvoke temp$0.<java.net.URL: void <init>(java.lang.String)>(StrUrl);
        tempURL = temp$0;
        temp$1 = this.<com.webc.utils.QueueManager: java.util.Queue queue>;
        temp$2 = interfaceinvoke temp$1.<java.util.Queue: boolean contains(java.lang.Object)>(tempURL);
        if temp$2 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$3 = <java.lang.System: java.io.PrintStream out>;
        temp$4 = new java.lang.StringBuffer;
        specialinvoke temp$4.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("LINK ALREADY EXISTS IN QUEUE:");
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(StrUrl);
        temp$5 = virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$3.<java.io.PrintStream: void println(java.lang.String)>(temp$5);
        goto label5;

     label2:
        nop;
        temp$6 = this.<com.webc.utils.QueueManager: java.util.Queue queue>;
        temp$7 = interfaceinvoke temp$6.<java.util.Queue: boolean add(java.lang.Object)>(tempURL);
        temp$8 = <java.lang.System: java.io.PrintStream out>;
        temp$9 = new java.lang.StringBuffer;
        specialinvoke temp$9.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("INSERT STMT = INSERT INTO `webcrawler`.`links` (url) value(\'");
        virtualinvoke temp$9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(StrUrl);
        virtualinvoke temp$9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("\');");
        temp$10 = virtualinvoke temp$9.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$8.<java.io.PrintStream: void println(java.lang.String)>(temp$10);
        if null != tempURL goto label3;

        goto label4;

     label3:
        nop;
        temp$11 = this.<com.webc.utils.QueueManager: com.webc.databaseUtils.DataBaseManager dbman>;
        temp$12 = new java.lang.StringBuffer;
        specialinvoke temp$12.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("INSERT INTO `webcrawler`.`links` (url) value(\'");
        virtualinvoke temp$12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(StrUrl);
        virtualinvoke temp$12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("\');");
        temp$13 = virtualinvoke temp$12.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$11.<com.webc.databaseUtils.DataBaseManager: void executeInsertQuery(java.lang.String)>(temp$13);

     label4:
        nop;
        temp$14 = <java.lang.System: java.io.PrintStream out>;
        temp$15 = new java.lang.StringBuffer;
        specialinvoke temp$15.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("NEW LINK ADDED:");
        temp$16 = virtualinvoke tempURL.<java.net.URL: java.lang.String toString()>();
        virtualinvoke temp$15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$16);
        temp$17 = virtualinvoke temp$15.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$14.<java.io.PrintStream: void println(java.lang.String)>(temp$17);
        temp$18 = null;
        tempURL = temp$18;

     label5:
        nop;
        goto label9;

     label6:
        nop;
        ex := @caughtexception;
        temp$20 = <com.webc.utils.QueueManager: java.lang.Class class$com$webc$utils$QueueManager>;
        if temp$20 != null goto label7;

        temp$21 = staticinvoke <com.webc.utils.QueueManager: java.lang.Class class$(java.lang.String)>("com.webc.utils.QueueManager");
        <com.webc.utils.QueueManager: java.lang.Class class$com$webc$utils$QueueManager> = temp$21;
        temp$19 = temp$21;
        goto label8;

     label7:
        nop;
        temp$19 = <com.webc.utils.QueueManager: java.lang.Class class$com$webc$utils$QueueManager>;

     label8:
        nop;
        temp$22 = virtualinvoke temp$19.<java.lang.Class: java.lang.String getName()>();
        temp$23 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(temp$22);
        temp$24 = <java.util.logging.Level: java.util.logging.Level SEVERE>;
        virtualinvoke temp$23.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>(temp$24, null, ex);
        temp$25 = <java.lang.System: java.io.PrintStream out>;
        temp$26 = new java.lang.StringBuffer;
        specialinvoke temp$26.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("***LINK DROPPED***:");
        virtualinvoke temp$26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(StrUrl);
        temp$27 = virtualinvoke temp$26.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$25.<java.io.PrintStream: void println(java.lang.String)>(temp$27);
        nop;
        goto label9;

     label9:
        nop;
        return;

        catch java.net.MalformedURLException from label0 to label6 with label6;
    }

    public java.net.URL getNextUrl()
    {
        com.webc.utils.QueueManager this;
        java.util.Queue temp$0, temp$2, temp$8;
        boolean temp$1;
        java.lang.Object temp$3, temp$9;
        java.net.URL temp$4, temp$10, temp$12;
        java.io.PrintStream temp$5, temp$6;
        java.lang.StringBuffer temp$7;
        java.lang.String temp$11;

        this := @this: com.webc.utils.QueueManager;
        temp$0 = this.<com.webc.utils.QueueManager: java.util.Queue queue>;
        temp$1 = interfaceinvoke temp$0.<java.util.Queue: boolean isEmpty()>();
        if temp$1 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = this.<com.webc.utils.QueueManager: java.util.Queue queue>;
        temp$3 = interfaceinvoke temp$2.<java.util.Queue: java.lang.Object remove()>();
        temp$4 = (java.net.URL) temp$3;
        return temp$4;

     label1:
        nop;
        temp$5 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$5.<java.io.PrintStream: void println(java.lang.String)>("RETURNING NULL FROM QUEUE.");
        temp$6 = <java.lang.System: java.io.PrintStream out>;
        temp$7 = new java.lang.StringBuffer;
        specialinvoke temp$7.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("[QUEUE-TOP]==");
        temp$8 = this.<com.webc.utils.QueueManager: java.util.Queue queue>;
        temp$9 = interfaceinvoke temp$8.<java.util.Queue: java.lang.Object peek()>();
        temp$10 = (java.net.URL) temp$9;
        virtualinvoke temp$7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$10);
        temp$11 = virtualinvoke temp$7.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$6.<java.io.PrintStream: void println(java.lang.String)>(temp$11);
        temp$12 = null;
        return temp$12;
    }

    public com.webc.databaseUtils.DataBaseManager getDbman()
    {
        com.webc.utils.QueueManager this;
        com.webc.databaseUtils.DataBaseManager temp$0;

        this := @this: com.webc.utils.QueueManager;
        temp$0 = this.<com.webc.utils.QueueManager: com.webc.databaseUtils.DataBaseManager dbman>;
        return temp$0;
    }

    public void setDbman(com.webc.databaseUtils.DataBaseManager)
    {
        com.webc.utils.QueueManager this;
        com.webc.databaseUtils.DataBaseManager dbman;

        this := @this: com.webc.utils.QueueManager;
        dbman := @parameter0: com.webc.databaseUtils.DataBaseManager;
        this.<com.webc.utils.QueueManager: com.webc.databaseUtils.DataBaseManager dbman> = dbman;
        return;
    }

    public static java.lang.Class class$(java.lang.String)
    {
        java.lang.String name, temp$2;
        java.lang.Class temp$0;
        java.lang.ClassNotFoundException e;
        java.lang.NoClassDefFoundError temp$1;

        name := @parameter0: java.lang.String;

     label0:
        nop;
        temp$0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(name);

     label1:
        nop;
        return temp$0;

     label2:
        nop;
        e := @caughtexception;
        temp$1 = new java.lang.NoClassDefFoundError;
        temp$2 = virtualinvoke e.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();
        specialinvoke temp$1.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>(temp$2);
        throw temp$1;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }
}
