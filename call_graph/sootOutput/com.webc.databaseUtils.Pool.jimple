public class com.webc.databaseUtils.Pool extends java.lang.Object
{
    private static javax.sql.DataSource ds;

    static void <clinit>()
    {
        java.io.FileInputStream fis, temp$0, temp$3;
        java.util.Properties properties, temp$1;
        java.lang.String dbType, temp$2, temp$5, temp$7, temp$8, temp$9;
        java.lang.StringBuffer temp$4;
        org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS cpds, temp$6;
        org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource tds, temp$10;
        java.io.FileNotFoundException e;
        java.io.IOException e;
        java.lang.Exception e;

     label0:
        nop;
        temp$0 = new java.io.FileInputStream;
        specialinvoke temp$0.<java.io.FileInputStream: void <init>(java.lang.String)>("resource/DATABASE.PROPERTY");
        fis = temp$0;
        temp$1 = new java.util.Properties;
        specialinvoke temp$1.<java.util.Properties: void <init>()>();
        properties = temp$1;
        virtualinvoke properties.<java.util.Properties: void load(java.io.InputStream)>(fis);
        temp$2 = virtualinvoke properties.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("DATABASE_TYPE");
        dbType = temp$2;
        virtualinvoke properties.<java.util.Properties: void clear()>();
        virtualinvoke fis.<java.io.FileInputStream: void close()>();
        temp$3 = new java.io.FileInputStream;
        temp$4 = new java.lang.StringBuffer;
        specialinvoke temp$4.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("resource/");
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(dbType);
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("_DATABASE.PROPERTY");
        temp$5 = virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$3.<java.io.FileInputStream: void <init>(java.lang.String)>(temp$5);
        fis = temp$3;
        virtualinvoke properties.<java.util.Properties: void load(java.io.InputStream)>(fis);
        temp$6 = new org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS;
        specialinvoke temp$6.<org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS: void <init>()>();
        cpds = temp$6;
        virtualinvoke cpds.<org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS: void setMaxActive(int)>(500);
        temp$7 = virtualinvoke properties.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("URL");
        virtualinvoke cpds.<org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS: void setUrl(java.lang.String)>(temp$7);
        temp$8 = virtualinvoke properties.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("USER");
        virtualinvoke cpds.<org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS: void setUser(java.lang.String)>(temp$8);
        temp$9 = virtualinvoke properties.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("PASSWORD");
        virtualinvoke cpds.<org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS: void setPassword(java.lang.String)>(temp$9);
        temp$10 = new org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource;
        specialinvoke temp$10.<org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource: void <init>()>();
        tds = temp$10;
        virtualinvoke tds.<org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource: void setConnectionPoolDataSource(javax.sql.ConnectionPoolDataSource)>(cpds);
        virtualinvoke tds.<org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource: void setMaxActive(int)>(10);
        virtualinvoke tds.<org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource: void setMaxWait(int)>(50);
        <com.webc.databaseUtils.Pool: javax.sql.DataSource ds> = tds;
        virtualinvoke properties.<java.util.Properties: void clear()>();
        virtualinvoke fis.<java.io.FileInputStream: void close()>();
        goto label4;

     label1:
        nop;
        e := @caughtexception;
        virtualinvoke e.<java.io.FileNotFoundException: void printStackTrace()>();
        nop;
        goto label4;

     label2:
        nop;
        e := @caughtexception;
        virtualinvoke e.<java.io.IOException: void printStackTrace()>();
        nop;
        goto label4;

     label3:
        nop;
        e := @caughtexception;
        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();
        nop;
        goto label4;

     label4:
        nop;
        return;

        catch java.io.FileNotFoundException from label0 to label1 with label1;
        catch java.io.IOException from label0 to label1 with label2;
        catch java.lang.Exception from label0 to label1 with label3;
    }

    public static java.sql.Connection getConnection() throws java.sql.SQLException
    {
        javax.sql.DataSource temp$0;
        java.sql.Connection temp$1;

        temp$0 = <com.webc.databaseUtils.Pool: javax.sql.DataSource ds>;
        temp$1 = interfaceinvoke temp$0.<javax.sql.DataSource: java.sql.Connection getConnection()>();
        return temp$1;
    }

    public void <init>()
    {
        com.webc.databaseUtils.Pool this;

        this := @this: com.webc.databaseUtils.Pool;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }
}
