public class com.webc.downloader.HtmlDownloader extends java.lang.Object implements java.lang.Runnable
{
    private java.io.BufferedReader buffIn;
    private java.lang.String inputLine;
    private java.lang.String htmlpage;
    private com.webc.utils.QueueManager qm;
    private com.webc.htmlUtils.DataExtractor de;
    private com.webc.databaseUtils.DataBaseManager dm;
    public static java.lang.Class class$com$webc$downloader$HtmlDownloader;

    public void <init>(com.webc.utils.QueueManager, com.webc.databaseUtils.DataBaseManager)
    {
        com.webc.downloader.HtmlDownloader this;
        com.webc.utils.QueueManager qm;
        com.webc.databaseUtils.DataBaseManager db, temp$1;
        com.webc.htmlUtils.DataExtractor temp$0;

        this := @this: com.webc.downloader.HtmlDownloader;
        qm := @parameter0: com.webc.utils.QueueManager;
        db := @parameter1: com.webc.databaseUtils.DataBaseManager;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<com.webc.downloader.HtmlDownloader: com.webc.utils.QueueManager qm> = qm;
        this.<com.webc.downloader.HtmlDownloader: com.webc.databaseUtils.DataBaseManager dm> = db;
        temp$0 = new com.webc.htmlUtils.DataExtractor;
        temp$1 = this.<com.webc.downloader.HtmlDownloader: com.webc.databaseUtils.DataBaseManager dm>;
        specialinvoke temp$0.<com.webc.htmlUtils.DataExtractor: void <init>(com.webc.databaseUtils.DataBaseManager)>(temp$1);
        this.<com.webc.downloader.HtmlDownloader: com.webc.htmlUtils.DataExtractor de> = temp$0;
        return;
    }

    public void run()
    {
        com.webc.downloader.HtmlDownloader this;
        java.io.PrintStream temp$0, temp$4, temp$7;
        java.lang.String tempStrHtml, temp$6, temp$14;
        java.net.URL CurrUrl, temp$3;
        com.webc.utils.QueueManager temp$1, temp$2, temp$9;
        java.lang.InterruptedException ex;
        java.lang.Throwable temp$5;
        com.webc.htmlUtils.DataExtractor temp$8;
        com.webc.databaseUtils.DataBaseManager temp$10;
        java.io.IOException ex;
        java.lang.Class temp$11, temp$12, temp$13;
        java.util.logging.Logger temp$15;
        java.util.logging.Level temp$16;

        this := @this: com.webc.downloader.HtmlDownloader;
        temp$0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$0.<java.io.PrintStream: void println(java.lang.String)>("New Downloader Thread...");

     label0:
        nop;
        goto label1;

     label1:
        nop;

     label2:
        nop;
        tempStrHtml = null;
        CurrUrl = null;
        temp$1 = this.<com.webc.downloader.HtmlDownloader: com.webc.utils.QueueManager qm>;
        entermonitor temp$1;

     label3:
        nop;
        temp$2 = this.<com.webc.downloader.HtmlDownloader: com.webc.utils.QueueManager qm>;
        temp$3 = virtualinvoke temp$2.<com.webc.utils.QueueManager: java.net.URL getNextUrl()>();
        CurrUrl = temp$3;
        if null == CurrUrl goto label4;

        goto label8;

     label4:
        nop;
        temp$4 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$4.<java.io.PrintStream: void println(java.lang.String)>("NULL URL RETURN FROM QUEUEMANG...");

     label5:
        nop;
        staticinvoke <java.lang.Thread: void sleep(long)>(5000L);
        goto label7;

     label6:
        nop;
        ex := @caughtexception;
        nop;
        goto label7;

     label7:
        nop;

     label8:
        nop;
        exitmonitor temp$1;
        goto label10;

     label9:
        nop;
        temp$5 := @caughtexception;
        exitmonitor temp$1;
        throw temp$5;

     label10:
        nop;
        temp$6 = virtualinvoke this.<com.webc.downloader.HtmlDownloader: java.lang.String downloadPage(java.net.URL)>(CurrUrl);
        tempStrHtml = temp$6;
        temp$7 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$7.<java.io.PrintStream: void println(java.lang.String)>(tempStrHtml);
        temp$8 = new com.webc.htmlUtils.DataExtractor;
        temp$9 = this.<com.webc.downloader.HtmlDownloader: com.webc.utils.QueueManager qm>;
        temp$10 = this.<com.webc.downloader.HtmlDownloader: com.webc.databaseUtils.DataBaseManager dm>;
        specialinvoke temp$8.<com.webc.htmlUtils.DataExtractor: void <init>(java.lang.String,java.net.URL,com.webc.utils.QueueManager,com.webc.databaseUtils.DataBaseManager)>(tempStrHtml, CurrUrl, temp$9, temp$10);
        virtualinvoke temp$8.<com.webc.htmlUtils.DataExtractor: void processpage()>();
        goto label14;

     label11:
        nop;
        ex := @caughtexception;
        temp$12 = <com.webc.downloader.HtmlDownloader: java.lang.Class class$com$webc$downloader$HtmlDownloader>;
        if temp$12 != null goto label12;

        temp$13 = staticinvoke <com.webc.downloader.HtmlDownloader: java.lang.Class class$(java.lang.String)>("com.webc.downloader.HtmlDownloader");
        <com.webc.downloader.HtmlDownloader: java.lang.Class class$com$webc$downloader$HtmlDownloader> = temp$13;
        temp$11 = temp$13;
        goto label13;

     label12:
        nop;
        temp$11 = <com.webc.downloader.HtmlDownloader: java.lang.Class class$com$webc$downloader$HtmlDownloader>;

     label13:
        nop;
        temp$14 = virtualinvoke temp$11.<java.lang.Class: java.lang.String getName()>();
        temp$15 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(temp$14);
        temp$16 = <java.util.logging.Level: java.util.logging.Level SEVERE>;
        virtualinvoke temp$15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>(temp$16, null, ex);
        nop;
        goto label14;

     label14:
        nop;
        nop;
        goto label0;

        return;

        catch java.lang.InterruptedException from label5 to label6 with label6;
        catch java.lang.Throwable from label3 to label10 with label9;
        catch java.io.IOException from label2 to label11 with label11;
    }

    public java.lang.String downloadPage(java.net.URL) throws java.io.IOException
    {
        com.webc.downloader.HtmlDownloader this;
        java.net.URL StrUrl;
        java.lang.String returnStrHtml, StrInput, temp$5, temp$7, temp$9;
        java.io.BufferedReader temp$0, temp$6, temp$10;
        java.io.InputStreamReader temp$1;
        java.io.InputStream temp$2;
        java.io.PrintStream temp$3;
        java.lang.StringBuffer temp$4, temp$8;

        this := @this: com.webc.downloader.HtmlDownloader;
        StrUrl := @parameter0: java.net.URL;
        returnStrHtml = " ";
        StrInput = null;
        temp$0 = new java.io.BufferedReader;
        temp$1 = new java.io.InputStreamReader;
        temp$2 = virtualinvoke StrUrl.<java.net.URL: java.io.InputStream openStream()>();
        specialinvoke temp$1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(temp$2);
        specialinvoke temp$0.<java.io.BufferedReader: void <init>(java.io.Reader)>(temp$1);
        virtualinvoke this.<com.webc.downloader.HtmlDownloader: void setBuffIn(java.io.BufferedReader)>(temp$0);
        temp$3 = <java.lang.System: java.io.PrintStream out>;
        temp$4 = new java.lang.StringBuffer;
        specialinvoke temp$4.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("FileName=");
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(StrUrl);
        temp$5 = virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$3.<java.io.PrintStream: void println(java.lang.String)>(temp$5);
        virtualinvoke this.<com.webc.downloader.HtmlDownloader: void setInputLine(java.lang.String)>("");
        virtualinvoke this.<com.webc.downloader.HtmlDownloader: void setHtmlpage(java.lang.String)>("");

     label0:
        nop;
        temp$6 = virtualinvoke this.<com.webc.downloader.HtmlDownloader: java.io.BufferedReader getBuffIn()>();
        temp$7 = virtualinvoke temp$6.<java.io.BufferedReader: java.lang.String readLine()>();
        StrInput = temp$7;
        if temp$7 != null goto label1;

        goto label2;

     label1:
        nop;
        temp$8 = new java.lang.StringBuffer;
        specialinvoke temp$8.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(returnStrHtml);
        virtualinvoke temp$8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(StrInput);
        virtualinvoke temp$8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" ");
        temp$9 = virtualinvoke temp$8.<java.lang.StringBuffer: java.lang.String toString()>();
        returnStrHtml = temp$9;
        goto label0;

     label2:
        nop;
        temp$10 = virtualinvoke this.<com.webc.downloader.HtmlDownloader: java.io.BufferedReader getBuffIn()>();
        virtualinvoke temp$10.<java.io.BufferedReader: void close()>();
        return returnStrHtml;
    }

    public java.io.BufferedReader getBuffIn()
    {
        com.webc.downloader.HtmlDownloader this;
        java.io.BufferedReader temp$0;

        this := @this: com.webc.downloader.HtmlDownloader;
        temp$0 = this.<com.webc.downloader.HtmlDownloader: java.io.BufferedReader buffIn>;
        return temp$0;
    }

    public void setBuffIn(java.io.BufferedReader)
    {
        com.webc.downloader.HtmlDownloader this;
        java.io.BufferedReader buffIn;

        this := @this: com.webc.downloader.HtmlDownloader;
        buffIn := @parameter0: java.io.BufferedReader;
        this.<com.webc.downloader.HtmlDownloader: java.io.BufferedReader buffIn> = buffIn;
        return;
    }

    public java.lang.String getInputLine()
    {
        com.webc.downloader.HtmlDownloader this;
        java.lang.String temp$0;

        this := @this: com.webc.downloader.HtmlDownloader;
        temp$0 = this.<com.webc.downloader.HtmlDownloader: java.lang.String inputLine>;
        return temp$0;
    }

    public void setInputLine(java.lang.String)
    {
        com.webc.downloader.HtmlDownloader this;
        java.lang.String inputLine;

        this := @this: com.webc.downloader.HtmlDownloader;
        inputLine := @parameter0: java.lang.String;
        this.<com.webc.downloader.HtmlDownloader: java.lang.String inputLine> = inputLine;
        return;
    }

    public java.lang.String getHtmlpage()
    {
        com.webc.downloader.HtmlDownloader this;
        java.lang.String temp$0;

        this := @this: com.webc.downloader.HtmlDownloader;
        temp$0 = this.<com.webc.downloader.HtmlDownloader: java.lang.String htmlpage>;
        return temp$0;
    }

    public void setHtmlpage(java.lang.String)
    {
        com.webc.downloader.HtmlDownloader this;
        java.lang.String htmlpage;

        this := @this: com.webc.downloader.HtmlDownloader;
        htmlpage := @parameter0: java.lang.String;
        this.<com.webc.downloader.HtmlDownloader: java.lang.String htmlpage> = htmlpage;
        return;
    }

    public com.webc.utils.QueueManager getQm()
    {
        com.webc.downloader.HtmlDownloader this;
        com.webc.utils.QueueManager temp$0;

        this := @this: com.webc.downloader.HtmlDownloader;
        temp$0 = this.<com.webc.downloader.HtmlDownloader: com.webc.utils.QueueManager qm>;
        return temp$0;
    }

    public com.webc.databaseUtils.DataBaseManager getDm()
    {
        com.webc.downloader.HtmlDownloader this;
        com.webc.databaseUtils.DataBaseManager temp$0;

        this := @this: com.webc.downloader.HtmlDownloader;
        temp$0 = this.<com.webc.downloader.HtmlDownloader: com.webc.databaseUtils.DataBaseManager dm>;
        return temp$0;
    }

    public static java.lang.Class class$(java.lang.String)
    {
        java.lang.String name, temp$2;
        java.lang.Class temp$0;
        java.lang.ClassNotFoundException e;
        java.lang.NoClassDefFoundError temp$1;

        name := @parameter0: java.lang.String;

     label0:
        nop;
        temp$0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(name);

     label1:
        nop;
        return temp$0;

     label2:
        nop;
        e := @caughtexception;
        temp$1 = new java.lang.NoClassDefFoundError;
        temp$2 = virtualinvoke e.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();
        specialinvoke temp$1.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>(temp$2);
        throw temp$1;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }
}
